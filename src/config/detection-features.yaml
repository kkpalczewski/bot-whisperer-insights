
detectionFeatures:
  - id: browser_info
    name: Browser Information
    codeName: browser_info
    type: object
    code: "(() => { const fp = new ClientJS(); return { browser: fp.getBrowser(), browserVersion: fp.getBrowserVersion(), engine: fp.getEngine(), engineVersion: fp.getEngineVersion() }; })()"
    description: Comprehensive browser information collected using ClientJS
    category: browser
    dependency: clientjs
    outputs:
      browser:
        name: Browser Name
        type: string
        description: The name of the browser being used
      browserVersion:
        name: Browser Version
        type: string
        description: The version of the browser
      engine:
        name: Browser Engine
        type: string
        description: The browser's rendering engine
      engineVersion:
        name: Engine Version
        type: string
        description: The version of the browser engine

  - id: device_info
    name: Device Information
    codeName: device_info
    type: object
    code: "(() => { const fp = new ClientJS(); return { os: fp.getOS(), osVersion: fp.getOSVersion(), device: fp.getDevice(), deviceType: fp.getDeviceType(), deviceVendor: fp.getDeviceVendor() }; })()"
    description: Comprehensive device information collected using ClientJS
    category: hardware
    dependency: clientjs
    outputs:
      os:
        name: Operating System
        type: string
        description: The operating system name
      osVersion:
        name: OS Version
        type: string
        description: The operating system version
      device:
        name: Device
        type: string
        description: The device name
      deviceType:
        name: Device Type
        type: string
        description: The type of device (desktop, mobile, tablet)
      deviceVendor:
        name: Device Vendor
        type: string
        description: The manufacturer of the device

  - id: screen_info
    name: Screen Information
    codeName: screen_info
    type: object
    code: "{ width: screen.width, height: screen.height, colorDepth: screen.colorDepth, pixelRatio: window.devicePixelRatio }"
    description: Detailed information about the device's screen capabilities
    category: hardware
    outputs:
      width:
        name: Screen Width
        type: number
        description: The width of the screen in pixels
      height:
        name: Screen Height
        type: number
        description: The height of the screen in pixels
      colorDepth:
        name: Color Depth
        type: number
        description: The color depth of the screen
      pixelRatio:
        name: Device Pixel Ratio
        type: number
        description: The ratio between physical pixels and logical pixels

  - id: fingerprint_data
    name: Fingerprint Data
    codeName: fingerprint_data
    type: object
    code: "(async () => { const fp = await FingerprintJS.load(); const result = await fp.get(); return { visitorId: result.visitorId, confidence: result.confidence.score, userAgent: result.components.userAgent, webDriver: result.components.webDriver, language: result.components.language, platform: result.components.platform, touchSupport: result.components.touchSupport }; })()"
    description: Comprehensive fingerprint data from FingerprintJS
    category: fingerprinting
    dependency: fingerprintjs
    outputs:
      visitorId:
        name: Visitor ID
        type: string
        description: Unique visitor identifier
      confidence:
        name: Confidence Score
        type: number
        description: Confidence score of the fingerprint
      userAgent:
        name: User Agent
        type: string
        description: Browser user agent string
      webDriver:
        name: Web Driver
        type: boolean
        description: Whether web driver is available
      language:
        name: Language
        type: string
        description: Browser language
      platform:
        name: Platform
        type: string
        description: Operating system platform
      touchSupport:
        name: Touch Support Details
        type: object
        description: Touch support capabilities
        outputs:
          maxTouchPoints:
            name: Max Touch Points
            type: number
            description: Maximum number of touch points supported
          touchEvent:
            name: Touch Event Support
            type: boolean
            description: Whether touch events are supported
          touchStart:
            name: Touch Start Support
            type: boolean
            description: Whether touchstart event is supported

  - id: user_agent
    name: User Agent
    codeName: user_agent
    type: string
    code: "navigator.userAgent"
    description: The user agent string provides information about the browser and operating system. Bots often use fake or inconsistent user agents that can be detected.
    category: browser
    
  - id: browser_languages
    name: Browser Languages
    codeName: browser_languages
    type: array
    code: "navigator.languages || []"
    description: Human users typically have consistent language preferences set in their browsers. Bots may have missing or inconsistent language settings.
    category: browser
    
  - id: timezone
    name: Time Zone
    codeName: timezone
    type: string
    code: "Intl.DateTimeFormat().resolvedOptions().timeZone"
    description: The browser time zone can be compared with the IP geolocation. Mismatches can indicate bot activity or VPN usage.
    category: browser
    
  - id: browser_plugins
    name: Browser Plugins
    codeName: browser_plugins
    type: array
    code: "Array.from(navigator.plugins).map(p => p.name)"
    description: The presence and variety of plugins can help identify real browsers. Bots typically have few or no plugins.
    category: browser
    
  - id: webgl_renderer
    name: WebGL Renderer
    codeName: webgl_renderer
    type: string
    code: "(() => { const canvas = document.createElement('canvas'); const gl = canvas.getContext('webgl'); return gl && gl.getExtension('WEBGL_debug_renderer_info') ? gl.getParameter(gl.getExtension('WEBGL_debug_renderer_info').UNMASKED_RENDERER_WEBGL) : null; })()"
    description: WebGL renderer information can identify the graphics hardware. This is difficult for bots to spoof accurately.
    category: hardware
    
  - id: canvas_fingerprint
    name: Canvas Fingerprint
    codeName: canvas_fingerprint
    type: string
    code: "(() => { const canvas = document.createElement('canvas'); canvas.width = 240; canvas.height = 60; const ctx = canvas.getContext('2d'); if (ctx) { ctx.fillText('BotWhisperer', 10, 50); return canvas.toDataURL(); } return null; })()"
    description: Canvas rendering varies by device and browser. The subtle differences in how text and shapes are rendered create a unique fingerprint that is hard to fake.
    category: fingerprinting
    
  - id: cpu_cores
    name: CPU Cores
    codeName: cpu_cores
    type: number
    code: "navigator.hardwareConcurrency || 0"
    description: The number of logical processors can help identify the device type. Bots often have unrealistic or inconsistent values.
    category: hardware
    
  - id: device_memory
    name: Device Memory
    codeName: device_memory
    type: number
    code: "(() => { try { return navigator.deviceMemory || 0; } catch(e) { return 0; } })()"
    description: The amount of RAM available can help identify device capabilities. This is often spoofed or unavailable in bot environments.
    category: hardware
    
  - id: has_touch_support
    name: Touch Support
    codeName: has_touch_support
    type: boolean
    code: "('ontouchstart' in window)"
    description: Touch capabilities can indicate device type. Inconsistencies between touch support and device type may indicate spoofing.
    category: hardware
    
  - id: network_info
    name: Network Information
    codeName: network_info
    type: object
    code: "(() => { try { return navigator.connection ? { effectiveType: navigator.connection.effectiveType, rtt: navigator.connection.rtt } : { effectiveType: 'unknown', rtt: 0 }; } catch(e) { return { effectiveType: 'unknown', rtt: 0 }; } })()"
    description: Network characteristics can help identify unusual connection patterns typical of bot networks or data centers.
    category: network
    outputs:
      effectiveType:
        name: Connection Type
        type: string
        description: The effective connection type (4g, 3g, 2g, slow-2g)
      rtt:
        name: Round Trip Time
        type: number
        description: The estimated round-trip time of the current connection
    
  - id: browser_features
    name: Browser Features
    codeName: browser_features
    type: object
    code: "{ localStorage: !!window.localStorage, sessionStorage: !!window.sessionStorage, indexedDB: !!window.indexedDB, webWorker: !!window.Worker, webGL: !!window.WebGLRenderingContext }"
    description: Support for modern browser features can help identify outdated browsers or simplified bot environments that lack full feature sets.
    category: browser
    outputs:
      localStorage:
        name: Local Storage
        type: boolean
        description: Whether the browser supports localStorage
      sessionStorage:
        name: Session Storage
        type: boolean
        description: Whether the browser supports sessionStorage
      indexedDB:
        name: IndexedDB
        type: boolean
        description: Whether the browser supports indexedDB
      webWorker:
        name: Web Worker
        type: boolean
        description: Whether the browser supports Web Workers
      webGL:
        name: WebGL
        type: boolean
        description: Whether the browser supports WebGL
    
  - id: has_audio_context
    name: Audio Context Available
    codeName: has_audio_context
    type: boolean
    code: "(() => { try { return !!(window.AudioContext || window.webkitAudioContext); } catch (e) { return false; } })()"
    description: The audio processing capabilities indicate if a device has proper audio support. Bots typically have limited or non-standard audio capabilities.
    category: fingerprinting
    
  - id: has_permissions_api
    name: Permissions API Available
    codeName: has_permissions_api
    type: boolean
    code: "!!navigator.permissions"
    description: The Permissions API availability indicates if the browser supports modern permission features. Bots may lack this capability.
    category: browser
    
  - id: do_not_track
    name: Do Not Track Setting
    codeName: do_not_track
    type: string
    code: "(() => { try { return navigator.doNotTrack || window.doNotTrack || navigator.msDoNotTrack || 'Not available'; } catch(e) { return 'Not available'; } })()"
    description: The Do Not Track setting in the browser can be used as a signal. Most users don't change this from default, so unusual patterns may indicate bot behavior.
    category: browser
    
  - id: has_battery_api
    name: Battery API Available
    codeName: has_battery_api
    type: boolean
    code: "(() => { try { return !!navigator.getBattery; } catch(e) { return false; } })()"
    description: Real devices have battery information. The presence of the Battery API helps identify real devices vs. emulated environments.
    category: hardware
    
  - id: visitor_id
    name: visitor_id
    codeName: visitor_id
    type: string
    code: "(async () => { const fp = await FingerprintJS.load(); const result = await fp.get(); return result.visitorId; })()"
    description: A unique identifier for the visitor generated by FingerprintJS that remains consistent across browser sessions.
    category: fingerprinting
    dependency: fingerprintjs

  - id: is_incognito
    name: is_incognito
    codeName: is_incognito
    type: boolean
    code: "(() => { const fp = new ClientJS(); return fp.isIncognito(); })()"
    description: Detects if the browser is in incognito/private browsing mode.
    category: browser
    dependency: clientjs

  - id: is_browser_spoofed
    name: is_browser_spoofed
    codeName: is_browser_spoofed
    type: boolean
    code: "(() => { const fp = new ClientJS(); return fp.getBrowserMajorVersion() !== parseInt(fp.getBrowser().split(' ')[1]); })()"
    description: Detects if the browser information is being spoofed by comparing reported versions.
    category: fingerprinting
    dependency: clientjs

  - id: browser_fingerprint
    name: browser_fingerprint
    codeName: browser_fingerprint
    type: string
    code: "(() => { const fp = new ClientJS(); return fp.getFingerprint(); })()"
    description: A unique hash generated from various browser attributes and capabilities.
    category: fingerprinting
    dependency: clientjs

fingerprintingLibraries:
  - id: fingerprint-js
    name: FingerprintJS
    description: A commercial browser fingerprinting service that identifies browsers with high accuracy.
    website: https://fingerprint.com/
    features:
      - Browser fingerprinting
      - VPN and proxy detection
      - Bot detection
      - TOR detection
      - Incognito mode detection
      - Device identification
    
  - id: creep-js
    name: CreepJS
    description: An open-source browser fingerprinting library focused on revealing spoofing and lies in the browser.
    website: https://github.com/abrahamjuliot/creepjs
    features:
      - Browser fingerprinting
      - Lie detection
      - Spoofing detection
      - Bot detection
      - Unique browser identification
    
  - id: clientjs
    name: ClientJS
    description: An open-source browser fingerprinting library that collects browser data and creates a fingerprint.
    website: https://github.com/jackspirou/clientjs
    features:
      - Browser fingerprinting
      - User agent parsing
      - Platform detection
      - Language detection
      - Flash detection
