
- id: browser_features
  name: Browser Features
  codeName: browser_features
  type: object
  code: |
    {
      automated_flags: {
        selenium: !!window.navigator.webdriver,
        phantom: !!(window._phantom || window.callPhantom),
        nightmare: !!window.__nightmare,
        chromedp: !!window.chrome?.app?.isInstalled && !window.chrome?.runtime,
        puppeteer: !!navigator.webdriver || !!window._TESTCAFE_DRIVER
      },
      permissions: {
        notifications: 'Notification' in window ? Notification.permission : 'not_supported',
        geolocation: 'geolocation' in navigator,
        midi: 'requestMIDIAccess' in navigator,
        bluetooth: 'bluetooth' in navigator,
        clipboard: 'clipboard' in navigator,
        credentials: 'credentials' in navigator,
        orientation: 'DeviceOrientationEvent' in window
      },
      memory: {
        deviceMemory: navigator.deviceMemory || 'unknown',
        hardwareConcurrency: navigator.hardwareConcurrency || 'unknown',
        maxTouchPoints: navigator.maxTouchPoints || 0
      },
      features: {
        serviceWorker: 'serviceWorker' in navigator,
        webGL: (() => {
          try {
            const canvas = document.createElement('canvas');
            return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
          } catch (e) {
            return false;
          }
        })(),
        webRTC: !!(window.RTCPeerConnection || window.webkitRTCPeerConnection),
        battery: 'getBattery' in navigator,
        cookies: navigator.cookieEnabled,
        localStorage: (() => {
          try {
            return !!window.localStorage;
          } catch (e) {
            return false;
          }
        })()
      },
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      languages: navigator.languages || [],
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      plugins: Array.from(navigator.plugins).map(p => ({ 
        name: p.name,
        description: p.description,
        filename: p.filename
      }))
    }
  description: Comprehensive browser feature detection for bot identification
  abuse_indication:
    bot: Multiple missing or misconfigured browser features can indicate automated browsers.
  category: browser
  outputs:
    automated_flags:
      name: Automation Flags
      type: object
      description: Direct indicators of automation frameworks
      abuse_indication:
        bot: Presence of any automation flags strongly indicates bot activity.
    permissions:
      name: Browser Permissions
      type: object
      description: Available browser permissions and their states
      abuse_indication:
        bot: Bots often have unusual permission patterns or missing capabilities.
    memory:
      name: Hardware Information
      type: object
      description: Device memory and processing capabilities
      abuse_indication:
        bot: Unusual hardware configurations can indicate virtual or containerized environments.
    features:
      name: Browser Features
      type: object
      description: Core browser feature availability
      abuse_indication:
        bot: Missing standard features or unusual combinations can indicate headless browsers.

