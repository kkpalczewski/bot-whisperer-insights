
- id: creepjs_data
  name: CreepJS Data
  codeName: creepjs_data
  type: object
  code: |
    async () => {
      try {
        // Make sure CreepJS is loaded and accessible
        const creepJS = await getCreepJS();
        if (!creepJS) {
          return {
            error: "CreepJS library not available",
            fingerprint: "unavailable-" + Math.random().toString(36).substring(2, 10),
            lies: { detected: false, score: 0 },
            bot: false,
            stealth: false,
            components: {
              canvas: { hash: Math.random().toString(36).substring(2, 10) },
              audio: { hash: Math.random().toString(36).substring(2, 10) },
              fonts: { hash: Math.random().toString(36).substring(2, 10) },
              webGL: { hash: Math.random().toString(36).substring(2, 10) }
            }
          };
        }
        
        try {
          const result = await creepJS.get();
          return {
            fingerprint: result.fingerprint || "unknown",
            lies: {
              detected: result.lies?.detected || false,
              score: result.lies?.score || 0
            },
            bot: result.bot || false,
            stealth: result.stealth || false,
            components: {
              canvas: result.components?.canvas || { hash: "unknown" },
              audio: result.components?.audio || { hash: "unknown" },
              fonts: result.components?.fonts || { hash: "unknown" },
              webGL: result.components?.webGL || { hash: "unknown" }
            }
          };
        } catch (e) {
          console.error("Error using CreepJS:", e);
          return {
            error: e.message || "Unknown error with CreepJS",
            fingerprint: "error-" + Math.random().toString(36).substring(2, 10),
            lies: { detected: false, score: 0 },
            bot: false,
            stealth: false,
            components: {
              canvas: { hash: Math.random().toString(36).substring(2, 10) },
              audio: { hash: Math.random().toString(36).substring(2, 10) },
              fonts: { hash: Math.random().toString(36).substring(2, 10) },
              webGL: { hash: Math.random().toString(36).substring(2, 10) }
            }
          };
        }
      } catch (outerError) {
        console.error("Outer error with CreepJS:", outerError);
        return {
          error: outerError.message || "Unknown error initializing CreepJS",
          fingerprint: "fatal-" + Math.random().toString(36).substring(2, 10),
          lies: { detected: false, score: 0 },
          bot: false,
          stealth: false,
          components: {
            canvas: { hash: Math.random().toString(36).substring(2, 10) },
            audio: { hash: Math.random().toString(36).substring(2, 10) },
            fonts: { hash: Math.random().toString(36).substring(2, 10) },
            webGL: { hash: Math.random().toString(36).substring(2, 10) }
          }
        };
      }
    }
  description: Advanced fingerprinting and lie detection using CreepJS library
  abuse_indication:
    bot: Multiple indicators including browser lies, stealth techniques, and inconsistent component behavior reveal sophisticated automation attempts
  category: fingerprinting
  dependency: creepjs
  outputs:
    fingerprint:
      name: Fingerprint Hash
      type: string
      description: Unique identifier based on browser characteristics
      abuse_indication:
        bot: Patterns in fingerprint generation or rapid changes can indicate bot rotation
    lies:
      name: Browser Lies
      type: object
      description: Detected browser lie patterns and trustworthiness score
      outputs:
        detected:
          name: Lies Detected
          type: boolean
          description: Whether any browser lies were detected
          abuse_indication:
            bot: Direct indicator of browser spoofing or manipulation attempts
        score:
          name: Lie Score
          type: number
          description: Trustworthiness score based on detected lies
          abuse_indication:
            bot: Lower scores indicate higher likelihood of browser spoofing
    bot:
      name: Bot Detection
      type: boolean
      description: Whether the client is likely an automated bot
      abuse_indication:
        bot: Direct bot detection based on multiple fingerprinting factors
    stealth:
      name: Stealth Techniques
      type: boolean
      description: Detection of privacy tools or stealth techniques
      abuse_indication:
        bot: Use of stealth techniques often indicates attempts to hide automation
    components:
      name: Browser Components
      type: object
      description: Detailed component analysis
      outputs:
        canvas:
          name: Canvas Analysis
          type: object
          description: Canvas rendering and modification detection
          abuse_indication:
            bot: Inconsistent or modified canvas behavior indicates tampering
        audio:
          name: Audio Context
          type: object
          description: Audio processing capabilities analysis
          abuse_indication:
            bot: Unusual audio context behavior can reveal headless browsers
        fonts:
          name: Font Detection
          type: object
          description: System and browser font analysis
          abuse_indication:
            bot: Limited or inconsistent font sets often indicate virtual environments
        webGL:
          name: WebGL Analysis
          type: object
          description: Advanced graphics capabilities detection
          abuse_indication:
            bot: Software rendering or missing capabilities suggest virtualized environment
    error:
      name: Error Message
      type: string
      description: Error message if CreepJS couldn't be loaded or executed
      abuse_indication:
        bot: Consistent errors may indicate browser security features blocking fingerprinting
