- id: fingerprintjs_data
  name: FingerprintJS Data
  codeName: fingerprintjs_data
  type: object
  exemplary_values:
    - {
        visitorId: "a1b2c3d4e5f6g7h8i9j0",
        confidence: 0.95,
        incognito: false,
        fonts: ["Arial", "Helvetica", "Times New Roman"],
        canvas: { winding: true, geometry: "data:image/png;base64,..." },
        webGlBasics:
          { version: "WebGL 1.0", vendor: "WebKit", renderer: "WebKit WebGL" },
        webGlExtensions:
          {
            extensions: ["ANGLE_instanced_arrays", "EXT_blend_minmax"],
            parameters:
              ["MAX_TEXTURE_SIZE=16384", "MAX_VIEWPORT_DIMS=16384,16384"],
          },
        consistentId: "a1b2c3d4e5f6g7h8i9j0",
      }
    - {
        visitorId: "p0o9n8m7l6k5j4i3h2g1f0",
        confidence: 0.3,
        incognito: true,
        fonts: ["Arial"],
        canvas: { winding: false, geometry: "data:image/png;base64,..." },
        webGlBasics:
          {
            version: "WebGL 1.0",
            vendor: "HeadlessChrome",
            renderer: "HeadlessChrome WebGL",
          },
        webGlExtensions: { extensions: [], parameters: [] },
        consistentId: "p0o9n8m7l6k5j4i3h2g1f0",
      }
  code: |
    async () => {
      try {
        // Get FingerprintJS instance (already initialized)
        const agent = await getFingerprintJS();
        if (!agent) {
          return {
            error: "FingerprintJS library not available"
          };
        }
        
        // Get fingerprint data with extended result
        const result = await agent.get({
          extendedResult: true
        });
        
        console.log("FingerprintJS result:", JSON.stringify(result, null, 2));
        
        return {
          visitorId: result.visitorId,
          confidence: result.confidence.score,
          incognito: result.incognito,
          // Most reliable bot detection components
          fonts: result.components?.fonts?.value || [],
          canvas: result.components?.canvas?.value || {},
          webGlBasics: result.components?.webGlBasics?.value || {},
          webGlExtensions: result.components?.webGlExtensions?.value || {},
          // Additional unique identifiers
          consistentId: result.visitorId
        };
      } catch (error) {
        console.error("Error getting FingerprintJS data:", error);
        return {
          error: error.message || "Unknown error with FingerprintJS"
        };
      }
    }
  description: |
    Advanced browser fingerprinting implementation using FingerprintJS library for sophisticated visitor identification and automation detection.
    The system performs comprehensive analysis of browser characteristics through extended fingerprinting (browser, OS, device, and network information),
    behavioral pattern analysis (timing, event handling, and API interaction), and consistency verification across multiple system APIs.
    Confidence scoring (0.0-1.0) is based on component stability, feature support verification, and pattern recognition algorithms.
    Key detection methods include:
    1) Extended fingerprinting with confidence scoring based on component stability and consistency
    2) Incognito mode detection through browser privacy settings
    3) Font fingerprinting analysis for automation detection
    4) Canvas fingerprinting verification
    5) WebGL capabilities and extensions analysis
    6) Visitor ID generation and persistence tracking across sessions
    All checks are performed asynchronously with proper error handling and fallback mechanisms.
  abuse_indication:
    bot: |
      Automated environments typically exhibit specific fingerprint patterns that differ from legitimate browsers.
      Confidence scores below 0.5 with inconsistent component behavior indicate sophisticated automation.
      Incognito mode combined with desktop browser claims suggests automated environment.
      Limited or manipulated font sets indicate potential automation.
      Inconsistent or missing canvas fingerprints suggest automated browser.
      Missing or limited WebGL capabilities and extensions indicate potential automation.
      Visitor ID changes occurring more frequently than every 5 minutes indicate potential automation.
  dependency: fingerprintjs
  outputs:
    visitorId:
      name: Visitor ID Analysis
      type: string
      exemplary_values:
        - "a1b2c3d4e5f6g7h8i9j0"
        - "p0o9n8m7l6k5j4i3h2g1f0"
        - "selenium_fingerprint_123"
        - "puppeteer_fingerprint_456"
      description: |
        Sophisticated visitor identification system generating unique fingerprints from multiple browser characteristics.
        Combines extended fingerprinting (browser, OS, device), system capabilities, browser configuration, and hardware information.
        Expected to remain stable across sessions for legitimate browsers, with natural variation patterns (changes every 24-48 hours).
      abuse_indication:
        bot: |
          Visitor ID changing more frequently than every 5 minutes indicates automated browser.
          ID pattern matching known automation tools (e.g., 'selenium', 'puppeteer') suggests automated environment.
          Inconsistent ID generation patterns across components indicate potential automation.
    confidence:
      name: Confidence Score Analysis
      type: number
      exemplary_values:
        - 0.95
        - 0.7
        - 0.3
      description: |
        Sophisticated confidence scoring system based on component consistency and behavioral patterns.
        Scores range from 0.0 to 1.0, with higher values indicating more legitimate browser characteristics.
        Combines component consistency (browser, OS, device), feature support verification, property value stability, and pattern recognition.
      abuse_indication:
        bot: |
          Confidence score below 0.5 (high automation likelihood) indicates automated browser.
          Score between 0.5-0.7 (suspicious) suggests browser manipulation.
          Score between 0.7-0.9 (low confidence) indicates potential spoofing.
    incognito:
      name: Incognito Mode Detection
      type: boolean
      exemplary_values:
        - false
        - true
      description: |
        Advanced privacy mode detection system.
        Identifies incognito/private browsing mode, browser privacy settings, and session isolation.
        Combines multiple detection methods for maximum reliability.
      abuse_indication:
        bot: |
          Incognito mode in desktop browser indicates automated browser.
          Privacy settings inconsistent with browser type suggest automated environment.
          Session isolation patterns matching automation tools indicate potential automation.
    fonts:
      name: Font Fingerprinting
      type: array
      exemplary_values:
        - ["Arial", "Helvetica", "Times New Roman", "Courier New"]
        - ["Arial"]
        - ["Default Font"]
      description: |
        Advanced font fingerprinting system analyzing installed fonts and rendering characteristics.
        Verifies font availability, rendering consistency, and system font configuration.
        Expected: rich, consistent font sets for legitimate browsers.
      abuse_indication:
        bot: |
          Limited or minimal font sets indicate automated browser.
          Unusual font combinations suggest automated environment.
          Inconsistent font rendering indicates potential automation.
    canvas:
      name: Canvas Fingerprinting
      type: object
      exemplary_values:
        - { winding: true, geometry: "data:image/png;base64,..." }
        - { winding: false, geometry: "data:image/png;base64,..." }
      description: |
        Sophisticated canvas fingerprinting system.
        Analyzes canvas rendering capabilities, geometry, and image data generation.
        Expected: consistent canvas fingerprints for legitimate browsers.
      abuse_indication:
        bot: |
          Inconsistent canvas fingerprints indicate automated browser.
          Missing or manipulated canvas data suggests automated environment.
          Unusual rendering patterns indicate potential automation.
    webGlBasics:
      name: WebGL Basic Capabilities
      type: object
      exemplary_values:
        - { version: "WebGL 1.0", vendor: "WebKit", renderer: "WebKit WebGL" }
        - {
            version: "WebGL 1.0",
            vendor: "HeadlessChrome",
            renderer: "HeadlessChrome WebGL",
          }
      description: |
        Advanced WebGL capabilities analysis system.
        Verifies WebGL version, vendor, and renderer information.
        Expected: complete WebGL support for legitimate browsers.
      abuse_indication:
        bot: |
          Missing or limited WebGL capabilities indicate automated browser.
          Inconsistent vendor/renderer information suggests automated environment.
          Unusual WebGL configurations indicate potential automation.
    webGlExtensions:
      name: WebGL Extensions Analysis
      type: object
      exemplary_values:
        - {
            extensions: ["ANGLE_instanced_arrays", "EXT_blend_minmax"],
            parameters:
              ["MAX_TEXTURE_SIZE=16384", "MAX_VIEWPORT_DIMS=16384,16384"],
          }
        - { extensions: [], parameters: [] }
      description: |
        Sophisticated WebGL extensions analysis system.
        Verifies available WebGL extensions and parameters.
        Expected: rich set of WebGL extensions for legitimate browsers.
      abuse_indication:
        bot: |
          Missing or limited WebGL extensions indicate automated browser.
          Inconsistent extension patterns suggest automated environment.
          Unusual parameter values indicate potential automation.
    consistentId:
      name: Consistent Visitor ID
      type: string
      exemplary_values:
        - "a1b2c3d4e5f6g7h8i9j0"
        - "p0o9n8m7l6k5j4i3h2g1f0"
        - "selenium_fingerprint_123"
      description: |
        Advanced persistent visitor identification system.
        Tracks cross-session consistency, browser fingerprint stability, component behavior, and pattern persistence.
        Detects anomalies in ID generation and session boundary behavior.
        Expected: stable across sessions with natural variation (changes every 24-48 hours).
      abuse_indication:
        bot: |
          ID remaining identical across different browsers indicates automated browser.
          Unusual persistence patterns (e.g., perfect stability) suggest automated environment.
          Session boundary anomalies (e.g., no ID changes) indicate potential automation.
