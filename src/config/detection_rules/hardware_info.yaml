- id: hardware_info
  name: Hardware Information
  codeName: hardware_info
  type: object
  exemplary_values:
    - {
        cpuCores: 8,
        deviceMemory: 16,
        batteryApi: true,
        webglRenderer: "NVIDIA GeForce RTX 3080/PCIe/SSE2",
      }
    - {
        cpuCores: 4,
        deviceMemory: 4,
        batteryApi: false,
        webglRenderer: "llvmpipe (LLVM 15.0.6, 256 bits)",
      }
  code: |
    {
      cpuCores: {
        logicalCores: navigator.hardwareConcurrency || 0,
        hyperThreading: (() => {
          const cores = navigator.hardwareConcurrency || 0;
          return cores > 0 && cores % 2 === 0;
        })()
      },
      deviceMemory: {
        totalMemory: (() => {
          try {
            return navigator.deviceMemory || 0;
          } catch (e) {
            return 0;
          }
        })(),
        memoryPattern: (() => {
          try {
            const memory = navigator.deviceMemory || 0;
            return memory > 0 ? "natural_variation" : "inconsistent_pattern";
          } catch (e) {
            return "inconsistent_pattern";
          }
        })()
      },
      batteryApi: {
        apiAvailable: !!navigator.getBattery,
        stateConsistency: (() => {
          try {
            return !!navigator.getBattery;
          } catch (e) {
            return false;
          }
        })()
      },
      webglRenderer: {
        rendererName: (() => {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl');
          if (gl && gl.getExtension('WEBGL_debug_renderer_info')) {
            const renderer = gl.getParameter(gl.getExtension('WEBGL_debug_renderer_info').UNMASKED_RENDERER_WEBGL);
            return renderer ? renderer.split('/')[0].trim() : null;
          }
          return null;
        })(),
        driverVersion: (() => {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl');
          if (gl && gl.getExtension('WEBGL_debug_renderer_info')) {
            const renderer = gl.getParameter(gl.getExtension('WEBGL_debug_renderer_info').UNMASKED_RENDERER_WEBGL);
            return renderer ? renderer.split('/').pop().trim() : null;
          }
          return null;
        })(),
        hardwareAccel: (() => {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl');
          if (gl && gl.getExtension('WEBGL_debug_renderer_info')) {
            const renderer = gl.getParameter(gl.getExtension('WEBGL_debug_renderer_info').UNMASKED_RENDERER_WEBGL);
            return renderer && !renderer.toLowerCase().includes('llvmpipe') && !renderer.toLowerCase().includes('swiftshader');
          }
          return false;
        })()
      }
    }
  description: |
    Advanced hardware capability detection system implementing sophisticated fingerprinting and virtualization detection.
    The system performs synchronous analysis of CPU architecture through hardwareConcurrency API (detecting logical processors and hyper-threading),
    memory configuration using deviceMemory API (identifying RAM allocation patterns), power management through Battery Status API,
    and graphics capabilities via WebGL renderer information extraction.
    Virtualization detection is performed through comprehensive hardware characteristic analysis and timing patterns.
  abuse_indication:
    bot: |
      Virtualized environments typically exhibit specific hardware patterns that differ from physical devices.
      Standardized CPU core counts (2, 4, 8) with zero variation across requests indicate automated environments.
      Memory values matching common VM configurations (2GB, 4GB, 8GB) suggest virtualization.
      Missing or generic battery API implementation on mobile devices indicates automation.
      Software-based WebGL renderers (llvmpipe, swiftshader) are typical in virtualized environments.
      Inconsistent hardware capability combinations across different APIs reveal automated browsers.
  outputs:
    cpuCores:
      name: CPU Core Analysis
      type: number
      exemplary_values:
        - 8
        - 4
        - 2
        - 32
      description: |
        Advanced CPU architecture analysis through hardwareConcurrency API.
        Detects logical processor count, hyper-threading capabilities, and virtualization indicators.
        Typical values range from 2-32 cores for physical devices, with natural variation in core counts.
        Virtualized environments often show standardized core counts (2, 4, 8) with no variation.
      abuse_indication:
        bot: |
          CPU core count consistently at 2, 4, or 8 (typical VM configurations) indicates automated browser.
          Core count inconsistent with device type (e.g., 32 cores on mobile) suggests automated environment.
          Zero variation in core count across multiple requests indicates virtualization.
          Hyper-threading ratio inconsistent with CPU architecture suggests automated environment.
      outputs:
        logicalCores:
          name: Logical Processor Count
          type: number
          exemplary_values:
            - 16
            - 8
            - 4
            - 2
          description: |
            Number of logical processors reported by hardwareConcurrency API.
            Expected range: 2-32 cores for physical devices, with natural variation.
            Virtual machines often report standardized core counts (2, 4, 8) with perfect consistency.
          abuse_indication:
            bot: |
              Consistent value of 2, 4, or 8 (VM standard) indicates automated browser.
              Zero variation across requests suggests automated environment.
        hyperThreading:
          name: Hyper-Threading Analysis
          type: boolean
          exemplary_values:
            - true
            - false
          description: |
            Indicates if hyper-threading is detected based on core count patterns.
            Expected: true for modern Intel/AMD processors (2x logical cores), false for mobile/ARM.
            Virtual machines often report inconsistent hyper-threading states.
          abuse_indication:
            bot: |
              Hyper-threading enabled on mobile device indicates automated browser.
              Inconsistent hyper-threading state suggests automated environment.
    deviceMemory:
      name: Memory Analysis
      type: number
      exemplary_values:
        - 16
        - 8
        - 4
        - 2
      description: |
        Comprehensive memory capacity analysis using deviceMemory API.
        Detects RAM size, allocation patterns, and virtualization indicators.
        Physical devices show natural memory configurations (4GB, 8GB, 16GB, etc.).
        Virtual machines often exhibit standardized memory values (2GB, 4GB, 8GB) with perfect alignment.
      abuse_indication:
        bot: |
          Memory consistently at 2GB, 4GB, or 8GB (common VM values) indicates automated browser.
          Memory value inconsistent with device type (e.g., 32GB on mobile) suggests automated environment.
          Zero variation in memory reports across requests indicates virtualization.
          Memory allocation patterns showing perfect alignment suggest automated environment.
      outputs:
        totalMemory:
          name: Total Memory Capacity
          type: number
          exemplary_values:
            - 16
            - 8
            - 4
            - 2
          description: |
            Total system memory in gigabytes reported by deviceMemory API.
            Expected range: 2-64GB for physical devices, with natural variation.
            Virtual machines often report standardized values (2GB, 4GB, 8GB) with perfect consistency.
          abuse_indication:
            bot: |
              Consistent value of 2, 4, or 8GB (VM standard) indicates automated browser.
              Zero variation across requests suggests automated environment.
        memoryPattern:
          name: Memory Allocation Pattern
          type: string
          exemplary_values:
            - "natural_variation"
            - "perfect_alignment"
            - "inconsistent_pattern"
          description: |
            Pattern of memory allocation and usage.
            Expected: natural variation in allocation patterns for physical devices.
            Virtual machines often show perfectly aligned memory blocks and consistent patterns.
          abuse_indication:
            bot: |
              Perfectly aligned memory blocks indicate automated browser.
              Consistent allocation patterns suggest automated environment.
    batteryApi:
      name: Battery API Analysis
      type: boolean
      exemplary_values:
        - true
        - false
      description: |
        Advanced battery status API analysis for power management and device verification.
        Detects API availability, state consistency, and device type indicators.
        Mobile devices typically have battery API enabled with natural state variations.
        Desktop devices may or may not have battery API depending on hardware.
        Virtual machines often report inconsistent or missing battery states.
      abuse_indication:
        bot: |
          Missing battery API on mobile device (should be present) indicates automated browser.
          Battery API present on desktop with no battery (should be absent) suggests automated environment.
          Battery state showing perfect consistency across requests indicates automation.
          Charging state changing in unnatural patterns suggests automated environment.
      outputs:
        apiAvailable:
          name: API Availability
          type: boolean
          exemplary_values:
            - true
            - false
          description: |
            Indicates if battery API is available and accessible.
            Expected: true for mobile devices, variable for desktop.
            Virtual machines often report inconsistent API availability.
          abuse_indication:
            bot: |
              Missing API on mobile device indicates automated browser.
              API present on desktop without battery suggests automated environment.
        stateConsistency:
          name: State Consistency
          type: boolean
          exemplary_values:
            - true
            - false
          description: |
            Indicates if battery state shows natural variation.
            Expected: true for physical devices, false for virtualized.
            Virtual machines often report unnaturally consistent battery states.
          abuse_indication:
            bot: |
              Perfect state consistency indicates automated browser.
              Unnatural state changes suggest automated environment.
    webglRenderer:
      name: WebGL Renderer Analysis
      type: string
      exemplary_values:
        - "NVIDIA GeForce RTX 3080/PCIe/SSE2"
        - "llvmpipe (LLVM 15.0.6, 256 bits)"
        - "ANGLE (Intel, Intel(R) UHD Graphics 630 Direct3D11 vs_5_0 ps_5_0, D3D11)"
        - "Google SwiftShader"
      description: |
        Sophisticated graphics hardware analysis through WebGL API.
        Extracts renderer information, driver versions, and acceleration status.
        Physical devices show specific GPU models and driver versions.
        Virtual machines often use software-based renderers (llvmpipe, swiftshader) or generic drivers.
      abuse_indication:
        bot: |
          Renderer name containing 'llvmpipe' or 'swiftshader' (software renderers) indicates automated browser.
          Generic driver names (e.g., 'Generic Renderer') suggest automated environment.
          Missing hardware acceleration on capable device indicates virtualization.
          Inconsistent renderer capabilities across requests suggest automated environment.
      outputs:
        rendererName:
          name: Renderer Identification
          type: string
          exemplary_values:
            - "NVIDIA GeForce RTX 3080"
            - "llvmpipe"
            - "Intel(R) UHD Graphics 630"
            - "Google SwiftShader"
          description: |
            Name of the graphics renderer reported by WebGL.
            Expected: specific GPU model names for physical devices.
            Virtual machines often report software-based or generic renderer names.
          abuse_indication:
            bot: |
              Software renderer names (llvmpipe, swiftshader) indicate automated browser.
              Generic renderer names suggest automated environment.
        driverVersion:
          name: Driver Version
          type: string
          exemplary_values:
            - "31.0.15.3598"
            - "15.0.6"
            - "27.20.100.8681"
            - "unknown"
          description: |
            Version of the graphics driver reported by WebGL.
            Expected: specific version numbers for physical devices.
            Virtual machines often report missing or generic driver versions.
          abuse_indication:
            bot: |
              Missing or generic driver version indicates automated browser.
              Inconsistent version numbers suggest automated environment.
        hardwareAccel:
          name: Hardware Acceleration
          type: boolean
          exemplary_values:
            - true
            - false
          description: |
            Indicates if hardware acceleration is enabled and working.
            Expected: true for capable physical devices.
            Virtual machines often report disabled or inconsistent acceleration states.
          abuse_indication:
            bot: |
              Hardware acceleration disabled on capable device indicates automated browser.
              Inconsistent acceleration state suggests automated environment.
