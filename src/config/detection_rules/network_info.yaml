- id: network_info
  name: Network Information
  codeName: network_info
  type: object
  code: |
    (() => {
      try {
        const connection = navigator.connection || {};
        const vpnPatterns = /datacenter|cloud|proxy|vpn|hosting/i;
        
        // Get IP info via WebRTC (if available)
        const hasWebRTC = !!(window.RTCPeerConnection || window.webkitRTCPeerConnection);
        
        return {
          connection: {
            effectiveType: connection.effectiveType || 'unknown',
            rtt: connection.rtt || 0,
            downlink: connection.downlink || 0,
            saveData: connection.saveData || false
          },
          webRTC: {
            available: hasWebRTC,
            protocol: window.location.protocol,
          },
          timing: {
            // Navigation timing data
            navigationStart: performance?.timing?.navigationStart || 0,
            loadEventEnd: performance?.timing?.loadEventEnd || 0,
            loadTime: performance?.timing?.loadEventEnd - performance?.timing?.navigationStart || 0
          }
        };
      } catch (e) {
        return {
          error: 'Failed to get network information',
          connection: {
            effectiveType: 'unknown',
            rtt: 0,
            downlink: 0,
            saveData: false
          }
        };
      }
    })()
  description: |
    Network fingerprinting system analyzing connection properties, WebRTC capabilities, and timing metrics.
    RTT (Round-Trip Time) measures network latency in milliseconds, critical for connection quality assessment.
    WebRTC (Web Real-Time Communication) is a browser API enabling peer-to-peer communication, often used for IP leak detection.
    The system performs comprehensive analysis of network characteristics including connection type classification (4G, 3G, slow-2g),
    bandwidth capacity in Mbps (Megabits per second), and timing metrics for page load performance.
  abuse_indication:
    bot: |
      RTT consistently below 10ms indicates datacenter-like latency, impossible for residential connections (expected: 20-100ms).
      WebRTC disabled on Chrome 90+ (where it's enabled by default) suggests IP masking attempts.
      Page load times consistently below 500ms (unrealistic for human users, expected: 1000-5000ms) indicate automation.
      Connection type claiming 4G with latency below 15ms (physically impossible for mobile networks) suggests spoofed information.
      Perfect bandwidth stability (zero variation in downlink speed) indicates emulated network conditions.
  outputs:
    connection:
      name: Connection Analysis
      type: object
      description: |
        Analyzes connection type, latency (RTT), bandwidth (Mbps), and data saving preferences.
        Residential networks show natural variation in metrics (RTT: 20-100ms, bandwidth: 10-100Mbps),
        while datacenter connections exhibit unnaturally stable patterns (RTT: <10ms, bandwidth: >100Mbps).
        Data saving mode is typically enabled on slow connections (<10Mbps) and disabled on fast connections.
      abuse_indication:
        bot: |
          Bandwidth consistently at 100Mbps with zero variation (typical for datacenter) indicates automated browser.
          Claiming 4G connection with 5ms latency (impossible for mobile networks, expected: 20-100ms) suggests automated environment.
          Data saving enabled with 200Mbps bandwidth (should be disabled) indicates automation.
      outputs:
        effectiveType:
          name: Connection Type Analysis
          type: string
          description: |
            Verifies reported type against actual performance metrics.
            4G: Modern mobile network (20-100ms RTT, 10-100Mbps bandwidth).
            3G: Legacy mobile network (100-300ms RTT, 1-10Mbps bandwidth).
            slow-2g: Legacy network with significant limitations (500-1000ms RTT, <1Mbps bandwidth).
          abuse_indication:
            bot: |
              Reporting slow-2g with 5ms RTT (should be 500-1000ms) indicates automated browser.
              Claiming 4G with 2ms latency and 200Mbps bandwidth (exceeds mobile network capabilities) suggests automated environment.
        rtt:
          name: Latency Analysis
          type: number
          description: |
            Round-Trip Time in milliseconds, measuring network latency.
            Residential connections: 20-100ms with natural variation.
            Mobile networks: 50-300ms depending on conditions.
            Datacenter connections: <10ms (unnaturally low for legitimate users).
          abuse_indication:
            bot: |
              RTT consistently at 5ms (typical for datacenter) indicates automated browser.
              Zero variation in RTT measurements (impossible for residential connections) suggests automated environment.
        downlink:
          name: Bandwidth Analysis
          type: number
          description: |
            Download speed in Megabits per second (Mbps).
            Residential networks: 10-100Mbps with natural variation.
            Mobile networks: 1-50Mbps depending on conditions.
            Datacenter connections: >100Mbps with unnaturally consistent speeds.
          abuse_indication:
            bot: |
              Bandwidth consistently at 100Mbps (typical for datacenter) indicates automated browser.
              Zero variation in bandwidth (impossible for residential connections) suggests automated environment.
        saveData:
          name: Data Saving Analysis
          type: boolean
          description: |
            Browser's data saving mode status, optimizing for limited bandwidth.
            Expected: enabled on slow connections (<10Mbps), disabled on fast connections.
            Natural usage patterns show consistency with connection type and speed.
          abuse_indication:
            bot: |
              Data saving enabled with 200Mbps bandwidth (should be disabled) indicates automated browser.
              Data saving toggling every 5 seconds (unnatural pattern) suggests automated environment.
    webRTC:
      name: WebRTC Analysis
      type: object
      description: |
        WebRTC (Web Real-Time Communication) API analysis for real-time communication capabilities.
        Modern browsers (>90% market share) support WebRTC by default for peer-to-peer communication.
        Disabling WebRTC is a common technique to prevent IP address leakage in automated environments.
      abuse_indication:
        bot: |
          WebRTC disabled on Chrome 90+ (should be enabled by default) indicates automated environment.
          Protocol switching between HTTP/HTTPS every 10 seconds suggests automated browser.
      outputs:
        available:
          name: WebRTC Availability
          type: boolean
          description: |
            WebRTC API availability check.
            Expected: present in modern browsers (Chrome 90+).
            Missing WebRTC support often indicates IP masking attempts.
          abuse_indication:
            bot: |
              WebRTC missing on Chrome 90+ (should be present) indicates automated environment.
              WebRTC availability changing every 5 seconds suggests automated browser.
        protocol:
          name: Protocol Analysis
          type: string
          description: |
            Connection protocol verification (HTTP/HTTPS).
            Modern browsers enforce HTTPS by default for security.
            HTTP usage is rare in legitimate modern browser traffic.
          abuse_indication:
            bot: |
              Using HTTP on Chrome 90+ (should be HTTPS) indicates automated environment.
              Protocol changing every 10 seconds suggests automated browser.
    timing:
      name: Navigation Timing Analysis
      type: object
      description: |
        Comprehensive page load performance analysis.
        Human users show natural variation in load times (1000-5000ms).
        Automated systems often exhibit unnaturally consistent and fast load times (<500ms).
        Timing patterns include navigation start, DOM processing, and load completion metrics.
      abuse_indication:
        bot: |
          Load times consistently at 200ms (unrealistic for humans) indicates automated browser.
          Zero variation in timing patterns (impossible for humans) suggests automated environment.
      outputs:
        navigationStart:
          name: Navigation Start Analysis
          type: number
          description: |
            Navigation start timestamp in milliseconds since epoch.
            Human users show natural variation (Â±100ms).
            Automated systems often show perfect consistency or unrealistic values.
          abuse_indication:
            bot: |
              Start time consistently at 0ms (impossible for humans) indicates automated browser.
              Zero variation in initialization (impossible for humans) suggests automated environment.
        loadEventEnd:
          name: Load Completion Analysis
          type: number
          description: |
            Page load completion timestamp in milliseconds since epoch.
            Varies based on content size and connection quality.
            Human users show natural variation in completion times.
          abuse_indication:
            bot: |
              Completion time consistently at 200ms (unrealistic for humans) indicates automated browser.
              Zero variation in end times (impossible for humans) suggests automated environment.
        loadTime:
          name: Load Duration Analysis
          type: number
          description: |
            Total page load duration in milliseconds.
            Residential connections: 1-3s with natural variation.
            Datacenter connections: 0.5-2s with unnaturally consistent timing.
          abuse_indication:
            bot: |
              Load duration consistently at 200ms (unrealistic for humans) indicates automated browser.
              Zero variation in load times (impossible for humans) suggests automated environment.


