creepjs_data:
  name: CreepJS Data
  type: object
  exemplaryValues:
    - {
        fingerprint: "a1b2c3d4e5f6g7h8i9j0",
        lies: { detected: false, score: 0.1 },
        bot: false,
        stealth: false,
        components:
          {
            canvas: { rendering: { capabilities: "full", performance: 0.95 } },
            audio:
              {
                context: { supported: true, hardwareAccelerated: true },
                processing:
                  { nodes: ["AnalyserNode", "GainNode", "OscillatorNode"] },
              },
            fonts: { systemFonts: 35, rendering: false },
            webGL:
              {
                renderer: "Google Inc. (NVIDIA) -- NVIDIA GeForce RTX 3080",
                extensions:
                  ["WEBGL_debug_renderer_info", "EXT_color_buffer_float"],
              },
          },
      }
    - {
        fingerprint: "p0o9n8m7l6k5j4i3h2g1f0",
        lies: { detected: true, score: 0.85 },
        bot: true,
        stealth: true,
        components:
          {
            canvas:
              { rendering: { capabilities: "limited", performance: 0.2 } },
            audio:
              {
                context: { supported: false, hardwareAccelerated: false },
                processing: { nodes: [] },
              },
            fonts: { systemFonts: 5, rendering: true },
            webGL:
              {
                renderer: "Mozilla -- llvmpipe (LLVM 12.0.0, 256 bits)",
                extensions: [],
              },
          },
      }
  code: |
    async () => {
      try {
        // Get CreepJS instance
        const creepJS = await getCreepJS();
        if (!creepJS) {
          return {
            error: "CreepJS library not available"
          };
        }
        
        // Use the API to get fingerprint data
        const result = await creepJS.get();
        
        // Check if there's an error field
        if (result.error) {
          return {
            fingerprint: "Error detected",
            lies: {
              detected: false,
              score: 0
            },
            bot: false,
            stealth: false,
            components: {
              canvas: {},
              audio: {},
              fonts: {},
              webGL: {}
            },
            error: result.error
          };
        }
        
        return {
          fingerprint: result.fingerprint,
          lies: {
            detected: result.lies?.detected || false,
            score: result.lies?.score || 0
          },
          bot: result.bot || false,
          stealth: result.stealth || false,
          components: {
            canvas: result.components?.canvas || {},
            audio: result.components?.audio || {},
            fonts: result.components?.fonts || {},
            webGL: result.components?.webGL || {}
          }
        };
      } catch (e) {
        console.error("Error using CreepJS:", e);
        return {
          error: e.message || "Unknown error with CreepJS",
          fingerprint: "Error detected",
          lies: {
            detected: false,
            score: 0
          },
          bot: false,
          stealth: false,
          components: {
            canvas: {},
            audio: {},
            fonts: {},
            webGL: {}
          }
        };
      }
    }
  description: |
    Advanced browser fingerprinting and lie detection implementation using CreepJS library for sophisticated automation detection.
    The system performs comprehensive analysis of browser characteristics through component fingerprinting (canvas, WebGL, audio, fonts),
    behavioral pattern analysis (timing, event handling, API interaction), and consistency verification across multiple system APIs.
    Lie detection (0.0-1.0) is based on property consistency, feature support verification, and pattern recognition algorithms.
    Key detection methods include:
    1) Multi-component fingerprinting with advanced analysis of canvas rendering (2D/WebGL), audio processing (Web Audio API), font rendering (FontFace API), and WebGL capabilities
    2) Sophisticated lie detection system analyzing browser property consistency (navigator, window, document), feature support verification (API availability), and API behavior patterns
    3) Stealth technique identification through anti-fingerprinting measures (canvas blocking, WebGL spoofing), privacy-focused modifications (user agent masking), and browser hardening detection
    4) Automated bot detection using behavioral analysis (event timing, API response), property consistency checks (navigator properties), and timing-based detection (performance.now)
    5) Component-specific anomaly detection through pattern recognition (rendering artifacts) and statistical analysis (timing distributions)
    6) Error handling and fallback mechanisms for maximum reliability
    All checks are performed asynchronously with proper error handling and fallback mechanisms.
  abuseIndication:
    bot: |
      Automated environments typically exhibit specific patterns that differ from legitimate browsers.
      A lie score above 0.7 combined with detected lies (lies.detected = true) indicates sophisticated automation.
      The presence of stealth techniques (stealth = true) alongside bot detection (bot = true) suggests automated environment.
      Inconsistent component behavior across tests, such as canvas rendering anomalies or audio processing inconsistencies, indicates potential automation.
      Missing or modified WebGL capabilities, particularly hardware acceleration markers, suggest virtualized environment.
      Limited font sets (fewer than 20 system fonts) with perfect rendering consistency indicate automated browser.
  dependency: creepjs
  outputs:
    fingerprint:
      name: Fingerprint
      type: string
      exemplaryValues:
        - "a1b2c3d4e5f6g7h8i9j0"
        - "p0o9n8m7l6k5j4i3h2g1f0"
        - "selenium_fingerprint_123"
        - "puppeteer_fingerprint_456"
      description: |
        Sophisticated fingerprint generation system creating unique identifiers from multiple browser characteristics.
        Combines component-specific fingerprints (canvas, WebGL, audio, fonts), system capabilities, browser configuration, and hardware information.
        Expected to show natural variation patterns across different browsers and devices (changes every 24-48 hours).
      abuseIndication:
        bot: |
          Fingerprint changing more frequently than every 5 minutes indicates automated browser.
          Fingerprint pattern matching known automation tools (e.g., 'puppeteer', 'selenium') suggests automated environment.
          Inconsistent fingerprint generation across components indicates potential automation.
      outputs:
        hashStability:
          name: Hash Stability
          type: boolean
          exemplaryValues:
            - false
            - true
          description: |
            Indicates if fingerprint hash remains stable across sessions.
            Expected: natural variation for legitimate browsers (changes every 24-48 hours).
            Virtual machines often show perfect stability or frequent changes.
          abuseIndication:
            bot: |
              Perfect hash stability across different browsers indicates automated browser.
              Unnatural variation patterns suggest automated environment.
        componentMatch:
          name: Component Pattern Matching
          type: string
          exemplaryValues:
            - "legitimate_browser"
            - "selenium_automation"
            - "puppeteer_automation"
            - "playwright_automation"
          description: |
            Matches fingerprint patterns against known automation tools.
            Expected: no matches for legitimate browsers.
            Common patterns include 'puppeteer', 'selenium', 'playwright', and 'cypress'.
          abuseIndication:
            bot: |
              Pattern matching 'puppeteer' or 'selenium' indicates automated browser.
              Generic pattern matching suggests automated environment.
    lies:
      name: Browser Lie Detection
      type: object
      exemplaryValues:
        - { detected: false, score: 0.1 }
        - { detected: true, score: 0.85 }
      description: |
        Advanced lie detection system analyzing browser property consistency and behavioral patterns.
        Verifies feature support claims (API availability), API behavior (timing, response), and configuration consistency across multiple browser components.
        Combines multiple detection methods (navigator properties, window features, document capabilities) for maximum reliability.
      abuseIndication:
        bot: |
          Multiple property inconsistencies across browser APIs indicate automated browser.
          Feature support claims inconsistent with browser version suggest automated environment.
          API behavior patterns matching known automation frameworks indicate potential automation.
      outputs:
        detected:
          name: Lie Detection
          type: boolean
          exemplaryValues:
            - false
            - true
          description: |
            Sophisticated detection of browser property inconsistencies and behavioral anomalies.
            Analyzes user agent claims (navigator.userAgent), feature support verification (API availability), and API behavior patterns (timing, response).
            Expected: false for legitimate browsers with natural variations.
          abuseIndication:
            bot: |
              Detection of property value inconsistencies indicates automated browser.
              Feature support mismatches with browser version suggest automated environment.
              API behavior anomalies matching automation patterns indicate potential automation.
        score:
          name: Trust Score
          type: number
          exemplaryValues:
            - 0.1
            - 0.3
            - 0.5
            - 0.7
            - 0.9
          description: |
            Advanced trustworthiness scoring system based on lie detection and behavioral analysis.
            Scores range from 0.0 to 1.0, with higher values indicating more suspicious behavior.
            Combines multiple factors including lie count, severity, and pattern recognition.
          abuseIndication:
            bot: |
              Trust score above 0.7 (high automation likelihood) indicates automated browser.
              Score between 0.5-0.7 (suspicious) suggests browser manipulation.
              Score between 0.3-0.5 (low trust) indicates potential spoofing.
          outputs:
            propertyScore:
              name: Property Consistency Score
              type: number
              exemplaryValues:
                - 0.9
                - 0.5
                - 0.2
              description: |
                Score based on browser property consistency.
                Expected: >0.8 for legitimate browsers.
                Checks navigator properties, window features, and document capabilities.
              abuseIndication:
                bot: |
                  Score below 0.5 indicates automated browser.
                  Perfect consistency (1.0) suggests automated environment.
            behaviorScore:
              name: Behavioral Pattern Score
              type: number
              exemplaryValues:
                - 0.8
                - 0.4
                - 0.1
              description: |
                Score based on behavioral pattern analysis.
                Expected: >0.7 for legitimate browsers.
                Analyzes timing patterns, event handling, and API interaction.
              abuseIndication:
                bot: |
                  Score below 0.4 indicates automated browser.
                  Unnatural pattern recognition suggests automated environment.
    bot:
      name: Bot Detection
      type: boolean
      exemplaryValues:
        - false
        - true
      description: |
        Sophisticated bot detection system analyzing browser behavior and characteristics.
        Combines behavioral analysis (event timing, API response), property consistency checks (navigator properties), and timing-based detection (performance.now).
        Verifies automation framework markers (navigator.webdriver) and browser control patterns.
      abuseIndication:
        bot: |
          Detection of known automation framework patterns indicates automated browser.
          Behavioral anomalies in browser interaction suggest automated environment.
          Timing inconsistencies in API responses indicate potential automation.
      outputs:
        frameworkDetected:
          name: Framework Detection
          type: string
          exemplaryValues:
            - null
            - "selenium"
            - "puppeteer"
            - "playwright"
          description: |
            Identifies specific automation frameworks.
            Expected: null for legitimate browsers.
            Common frameworks: Selenium, Puppeteer, Playwright, Cypress.
          abuseIndication:
            bot: |
              Detection of 'puppeteer' or 'selenium' indicates automated browser.
              Generic framework detection suggests automated environment.
        timingAnalysis:
          name: Timing Pattern
          type: boolean
          exemplaryValues:
            - false
            - true
          description: |
            Analyzes API response timing patterns.
            Expected: natural variation for legitimate browsers.
            Uses performance.now() for high-resolution timing.
          abuseIndication:
            bot: |
              Unnaturally consistent timing indicates automated browser.
              Perfect timing patterns suggest automated environment.
    stealth:
      name: Stealth Technique
      type: boolean
      exemplaryValues:
        - false
        - true
      description: |
        Advanced detection of privacy tools and stealth techniques.
        Identifies anti-fingerprinting measures (canvas blocking, WebGL spoofing), privacy-focused modifications (user agent masking), and browser hardening.
        Analyzes extension interference and privacy-focused browser configurations.
      abuseIndication:
        bot: |
          Detection of anti-fingerprinting measures indicates automated browser.
          Privacy-focused modifications inconsistent with browser type suggest automated environment.
          Browser hardening techniques matching known automation patterns indicate potential automation.
      outputs:
        privacyTools:
          name: Privacy Tool Detection
          type: string
          exemplaryValues:
            - null
            - "canvasblocker"
            - "privacybadger"
            - "ublockorigin"
          description: |
            Identifies specific privacy tools and modifications.
            Expected: null for legitimate browsers.
            Common tools: CanvasBlocker, Privacy Badger, uBlock Origin.
          abuseIndication:
            bot: |
              Detection of 'canvasblocker' or 'privacybadger' indicates automated browser.
              Generic privacy tool detection suggests automated environment.
        hardeningLevel:
          name: Browser Hardening
          type: number
          exemplaryValues:
            - 0
            - 0.3
            - 0.7
            - 1.0
          description: |
            Analyzes level of browser hardening.
            Expected: 0 for legitimate browsers.
            Checks for anti-fingerprinting measures and privacy modifications.
          abuseIndication:
            bot: |
              Hardening level > 0.5 indicates automated browser.
              Unnatural hardening patterns suggest automated environment.
    components:
      name: Component
      type: object
      exemplaryValues:
        - {
            canvas: { rendering: { capabilities: "full", performance: 0.95 } },
            audio:
              {
                context: { supported: true, hardwareAccelerated: true },
                processing:
                  { nodes: ["AnalyserNode", "GainNode", "OscillatorNode"] },
              },
            fonts: { systemFonts: 35, rendering: false },
            webGL:
              {
                renderer: "Google Inc. (NVIDIA) -- NVIDIA GeForce RTX 3080",
                extensions:
                  ["WEBGL_debug_renderer_info", "EXT_color_buffer_float"],
              },
          }
        - {
            canvas:
              { rendering: { capabilities: "limited", performance: 0.2 } },
            audio:
              {
                context: { supported: false, hardwareAccelerated: false },
                processing: { nodes: [] },
              },
            fonts: { systemFonts: 5, rendering: true },
            webGL:
              {
                renderer: "Mozilla -- llvmpipe (LLVM 12.0.0, 256 bits)",
                extensions: [],
              },
          }
      description: |
        Comprehensive analysis of browser components and capabilities.
        Verifies rendering consistency (canvas, WebGL), processing capabilities (audio), and hardware acceleration.
        Detects anomalies in component behavior and performance characteristics.
      abuseIndication:
        bot: |
          Inconsistent rendering behavior across components indicates automated browser.
          Limited processing capabilities inconsistent with device type suggest automated environment.
          Missing advanced features in capable browsers indicate potential automation.
      outputs:
        canvas:
          name: Canvas Rendering
          type: object
          exemplaryValues:
            - { rendering: { capabilities: "full", performance: 0.95 } }
            - { rendering: { capabilities: "limited", performance: 0.2 } }
          description: |
            Advanced canvas fingerprinting and rendering analysis.
            Verifies rendering capabilities (2D/WebGL), anti-aliasing implementation, and color space support.
            Analyzes performance characteristics and hardware acceleration status.
          abuseIndication:
            bot: |
              Modified rendering behavior with perfect consistency indicates automated browser.
              Limited color support inconsistent with device capabilities suggests automated environment.
              Performance characteristics showing unnatural patterns indicate potential automation.
          outputs:
            rendering:
              name: Rendering Capabilities
              type: object
              exemplaryValues:
                - { capabilities: "full", hardwareAccelerated: true }
                - { capabilities: "limited", hardwareAccelerated: false }
              description: |
                Analyzes canvas rendering capabilities.
                Expected: device-specific capabilities for legitimate browsers.
                Checks 2D context, WebGL, and hardware acceleration.
              abuseIndication:
                bot: |
                  Perfect rendering consistency indicates automated browser.
                  Unnatural rendering patterns suggest automated environment.
            performance:
              name: Performance
              type: number
              exemplaryValues:
                - 0.95
                - 0.5
                - 0.2
              description: |
                Measures rendering performance characteristics.
                Expected: natural variation for legitimate browsers.
                Uses performance.now() for high-resolution timing.
              abuseIndication:
                bot: |
                  Unnaturally consistent performance indicates automated browser.
                  Perfect timing patterns suggest automated environment.
        audio:
          name: Audio Processing
          type: object
          exemplaryValues:
            - {
                context: { supported: true, hardwareAccelerated: true },
                processing:
                  { nodes: ["AnalyserNode", "GainNode", "OscillatorNode"] },
              }
            - {
                context: { supported: false, hardwareAccelerated: false },
                processing: { nodes: [] },
              }
          description: |
            Sophisticated audio context and processing analysis.
            Verifies context creation capabilities (AudioContext), processing node support (AnalyserNode), and hardware acceleration.
            Analyzes performance characteristics and audio processing patterns.
          abuseIndication:
            bot: |
              Missing audio processing nodes indicates automated browser.
              Limited context support inconsistent with browser version suggest automated environment.
              Performance characteristics showing unnatural patterns indicate potential automation.
          outputs:
            context:
              name: Audio Context
              type: object
              exemplaryValues:
                - { supported: true, hardwareAccelerated: true }
                - { supported: false, hardwareAccelerated: false }
              description: |
                Analyzes audio context creation and capabilities.
                Expected: full context support for legitimate browsers.
                Checks AudioContext, OfflineAudioContext, and hardware acceleration.
              abuseIndication:
                bot: |
                  Limited context support indicates automated browser.
                  Inconsistent context creation suggests automated environment.
            processing:
              name: Processing Capabilities
              type: object
              exemplaryValues:
                - { nodes: ["AnalyserNode", "GainNode", "OscillatorNode"] }
                - { nodes: [] }
              description: |
                Verifies audio processing capabilities.
                Expected: full processing support for legitimate browsers.
                Checks AnalyserNode, GainNode, and other audio nodes.
              abuseIndication:
                bot: |
                  Missing processing nodes indicates automated browser.
                  Limited processing capabilities suggest automated environment.
        fonts:
          name: Font Rendering
          type: object
          exemplaryValues:
            - { systemFonts: 35, rendering: false }
            - { systemFonts: 5, rendering: true }
          description: |
            Advanced font rendering and system analysis.
            Verifies system font detection (FontFace API), web font support, and rendering consistency.
            Analyzes anti-aliasing implementation and font rendering patterns.
          abuseIndication:
            bot: |
              Limited font set (fewer than 20 system fonts) indicates automated browser.
              Inconsistent font rendering across browsers suggest automated environment.
              Missing system fonts in capable browsers indicate potential automation.
          outputs:
            systemFonts:
              name: System Font
              type: number
              exemplaryValues:
                - 35
                - 20
                - 5
              description: |
                Counts detected system fonts.
                Expected: >20 for legitimate desktop browsers.
                Uses FontFace API and system font enumeration.
              abuseIndication:
                bot: |
                  Fewer than 20 system fonts indicates automated browser.
                  Unnatural font count suggests automated environment.
            rendering:
              name: Rendering Consistency
              type: boolean
              exemplaryValues:
                - false
                - true
              description: |
                Verifies font rendering consistency.
                Expected: natural variation for legitimate browsers.
                Checks anti-aliasing and rendering patterns.
              abuseIndication:
                bot: |
                  Perfect rendering consistency indicates automated browser.
                  Unnatural rendering patterns suggest automated environment.
        webGL:
          name: WebGL Capability
          type: object
          exemplaryValues:
            - {
                renderer: "Google Inc. (NVIDIA) -- NVIDIA GeForce RTX 3080",
                extensions:
                  ["WEBGL_debug_renderer_info", "EXT_color_buffer_float"],
              }
            - {
                renderer: "Mozilla -- llvmpipe (LLVM 12.0.0, 256 bits)",
                extensions: [],
              }
          description: |
            Sophisticated WebGL capabilities and performance analysis.
            Verifies context creation (WebGLRenderingContext), extension support, and hardware acceleration.
            Analyzes performance characteristics and rendering capabilities.
          abuseIndication:
            bot: |
              Software-based WebGL rendering indicates automated browser.
              Missing WebGL extensions in capable browsers suggest automated environment.
              Performance limitations inconsistent with device capabilities indicate potential automation.
          outputs:
            renderer:
              name: Renderer
              type: string
              exemplaryValues:
                - "Google Inc. (NVIDIA) -- NVIDIA GeForce RTX 3080"
                - "Mozilla -- llvmpipe (LLVM 12.0.0, 256 bits)"
                - "not_supported"
              description: |
                Identifies WebGL renderer and capabilities.
                Expected: hardware-accelerated renderer for capable devices.
                Checks WEBGL_debug_renderer_info extension.
              abuseIndication:
                bot: |
                  Software renderer (llvmpipe, swiftshader) indicates automated browser.
                  Generic renderer name suggests automated environment.
            extensions:
              name: Extension Support
              type: object
              exemplaryValues:
                - {
                    supported:
                      ["WEBGL_debug_renderer_info", "EXT_color_buffer_float"],
                  }
                - { supported: [] }
              description: |
                Analyzes WebGL extension support.
                Expected: full extension support for capable devices.
                Checks WEBGL_debug_renderer_info and other critical extensions.
              abuseIndication:
                bot: |
                  Missing critical extensions indicates automated browser.
                  Limited extension support suggests automated environment.
    error:
      name: Error
      type: string
      exemplaryValues:
        - null
        - "Library not available"
        - "Security feature blocked"
        - "Execution failed"
      description: |
        Comprehensive error analysis and reporting system.
        Identifies library loading failures, execution errors, and security-related blocks.
        Analyzes component-specific failures and error patterns.
      abuseIndication:
        bot: |
          Consistent loading failures across components indicate automated browser.
          Security feature blocks inconsistent with browser type suggest automated environment.
          Component-specific errors matching automation patterns indicate potential automation.
      outputs:
        errorType:
          name: Error Type
          type: string
          exemplaryValues:
            - null
            - "security_block"
            - "api_restriction"
            - "execution_error"
          description: |
            Categorizes and analyzes error types.
            Expected: no errors for legitimate browsers.
            Checks for security blocks, API restrictions, and execution errors.
          abuseIndication:
            bot: |
              Security-related errors indicate automated browser.
              Consistent error patterns suggest automated environment.
        errorPattern:
          name: Error Pattern
          type: string
          exemplaryValues:
            - null
            - "selenium_error"
            - "puppeteer_error"
            - "playwright_error"
          description: |
            Analyzes error patterns and consistency.
            Expected: no patterns for legitimate browsers.
            Checks for automation-specific error signatures.
          abuseIndication:
            bot: |
              Pattern matching automation tools indicates automated browser.
              Consistent error types suggest automated environment.
